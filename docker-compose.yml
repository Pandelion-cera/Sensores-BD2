version: '3.8'

services:
  mongodb:
    image: mongo:7.0
    container_name: bd2-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongodb_data:/data/db
    networks:
      - bd2-network

  cassandra:
    image: cassandra:4.1
    container_name: bd2-cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: SensorCluster
      CASSANDRA_DC: dc1
      CASSANDRA_RACK: rack1
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - bd2-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 30s
      timeout: 10s
      retries: 5

  neo4j:
    image: neo4j:5.14
    container_name: bd2-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/password123
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_db_logs_query_enabled: "VERBOSE"
      NEO4J_db_logs_query_threshold: "0s"
    command: ["neo4j", "--verbose"]
    volumes:
      - neo4j_data:/data
    networks:
      - bd2-network

  redis:
    image: redis:7.2-alpine
    container_name: bd2-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - bd2-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bd2-backend
    ports:
      - "8000:8000"
    environment:
      MONGO_URI: mongodb://admin:admin123@mongodb:27017/
      CASSANDRA_HOSTS: cassandra
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password123
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-secret-key-change-in-production
      JWT_ALGORITHM: HS256
      JWT_EXPIRATION_MINUTES: 1440
    depends_on:
      cassandra:
        condition: service_healthy
      mongodb:
        condition: service_started
      neo4j:
        condition: service_started
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
    networks:
      - bd2-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bd2-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - bd2-network
    command: npm run dev

volumes:
  mongodb_data:
  cassandra_data:
  neo4j_data:
  redis_data:

networks:
  bd2-network:
    driver: bridge

